/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.Gestao;

import ClassesDeConexao.OrdemDeServicoDB;
import Contantes.NomesColunasContantes;
import Dialogs.AlterarStatusOS;
import Dialogs.CancelarOrdemDLG;
import Dialogs.CobrarOrdemDLG;
import Dialogs.ExecutarordemDLG;
import Dialogs.FinalizarOrdemDLG;
import JTPadrao.JCTable;
import Model.Status;
import SQLUtil.MySqlConnect;
import Util.Utilidades;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;
import view.Cadastro.CadastroOrdemDeServico;
import view.Filtro.FiltroGestaoOrdemServico;
import view.MainFrameSLM;

/**
 *
 * @author csqueiroz
 */
public class PanelGestaoOrdemDeServico extends javax.swing.JPanel {

    private GestaoOrdemServico gestaoOS;

    /**
     * Creates new form PanelGestaoOrdemDeServico
     */
    public PanelGestaoOrdemDeServico(GestaoOrdemServico GestaoOS) {
        initComponents();
        jTable = new JCTable();
        this.gestaoOS = GestaoOS;
        jTable.addMouseListener(gestaoOS.getMouseListener());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(220, 220, 220));
        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(jTable);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void visualizarOS() {
        try {
            HashMap parametros = new HashMap();
            parametros.put("ID_OS", ((JCTable) jTable).getValorAsString("ID"));
            String report = "C:\\Users\\csqueiroz\\PreviewPrint.jrxml";
            JasperReport jReport = JasperCompileManager.compileReport(report);
            JasperPrint jp = JasperFillManager.fillReport(jReport, null, MySqlConnect.getInstance().getConn());
            JasperViewer.viewReport(jp);
        } catch (Exception e) {
        }

    }

    public void alterarStatusOS() {
        HashMap parametros = new HashMap();
        parametros.put("ID", null);
        parametros.put("NR_ORDEM", null);
        parametros.put("NM_CLIENTE", null);
        parametros.put("STATUS_OS", null);
        for (HashMap hm : getTable().getValoresLinhasSelecionadas(parametros)) {
            AlterarStatusOS alteraStatusOrdem = new AlterarStatusOS(MainFrameSLM.getInstance(), true, Utilidades.validaInt(hm.get("ID")), Utilidades.validaString(hm.get("NR_ORDEM")), Utilidades.validaString(hm.get("NM_CLIENTE")), Status.valueOf(Utilidades.validaString(hm.get("STATUS_OS"))));
        }
        atualizarConsulta(((FiltroGestaoOrdemServico) gestaoOS.getPanelNorth()).montarRestricoes());
    }

    public void cancelarOrdem() {
        HashMap parametros = new HashMap();
        parametros.put("ID", null);
        parametros.put("NR_ORDEM", null);
        parametros.put("NM_CLIENTE", null);
        parametros.put("STATUS_OS", null);
        for (HashMap hm : getTable().getValoresLinhasSelecionadas(parametros)) {
            if (!Utilidades.validaString(hm.get("STATUS_OS")).equalsIgnoreCase("CANCELADA")) {
                CancelarOrdemDLG cancelaOrdemDLG = new CancelarOrdemDLG(MainFrameSLM.getInstance(), true, Utilidades.validaInt(hm.get("ID")), Utilidades.validaString(hm.get("NR_ORDEM")), Utilidades.validaString(hm.get("NM_CLIENTE")));
            } else {
                JOptionPane.showMessageDialog(this, "A OS Nº " + Utilidades.validaString(hm.get("NR_ORDEM")) + " já esta cancelada.");
            }
        }
        atualizarConsulta(((FiltroGestaoOrdemServico) gestaoOS.getPanelNorth()).montarRestricoes());
    }

    public void cadastrarOrdem() {
        MainFrameSLM.getInstance().adicionarAba(new CadastroOrdemDeServico(), "Cadastro de Ordem de Serviço.");
    }

    public void executarOrdens() {
        HashMap parametros = new HashMap();
        parametros.put("ID", null);
        parametros.put("STATUS_OS", null);

        ArrayList<HashMap> listaOS = new ArrayList<>();

        for (HashMap hm : getTable().getValoresLinhasSelecionadas(parametros)) {
            if (hm.get("STATUS_OS").toString().equalsIgnoreCase("LANCADA")) {
                listaOS.add(hm);
            }
        }
        if (getTable().isLinhasSelecionadas()) {
            ExecutarordemDLG executaOrdem = new ExecutarordemDLG(MainFrameSLM.getInstance(), true, listaOS);
            atualizarConsulta(((FiltroGestaoOrdemServico) gestaoOS.getPanelNorth()).montarRestricoes());
        }
    }

    public void finalizarOrdens() {
        HashMap parametros = new HashMap();
        parametros.put("ID", null);
        parametros.put("NR_ORDEM", null);
        parametros.put("NM_CLIENTE", null);
        parametros.put("STATUS_OS", null);
        for (HashMap hm : getTable().getValoresLinhasSelecionadas(parametros)) {
            if (Utilidades.validaString(hm.get("STATUS_OS")).equalsIgnoreCase("EM_EXECUCAO")) {
                FinalizarOrdemDLG finalizaOrdemDLG = new FinalizarOrdemDLG(MainFrameSLM.getInstance(), true, Utilidades.validaInt(hm.get("ID")), Utilidades.validaString(hm.get("NR_ORDEM")), Utilidades.validaString(hm.get("NM_CLIENTE")));
            } else {
                JOptionPane.showMessageDialog(this, "A OS Nº " + Utilidades.validaString(hm.get("NR_ORDEM")) + " não está em execução.");
            }
            //FinalizarOrdemDLG finalizaOrdemDLG = new FinalizarOrdemDLG(MainFrameSLM.getInstance(), true, Utilidades.validaInt(hm.get("ID")), Utilidades.validaString(hm.get("NR_ORDEM")), Utilidades.validaString(hm.get("NM_CLIENTE")));
        }
        atualizarConsulta(((FiltroGestaoOrdemServico) gestaoOS.getPanelNorth()).montarRestricoes());
    }

    public void atualizarConsulta(HashMap restricoes) {
        KeyListener[] keyListeners = jTable.getKeyListeners();
        MouseListener[] mouseListeners = jTable.getMouseListeners();
        if (restricoes.size() > 0) {
            HashMap parametros = new HashMap();
            parametros.put("ID", null);
            parametros.put("NR_ORDEM", null);
            parametros.put("NM_CLIENTE", null);
            parametros.put("DT_EMISSAO", null);
            parametros.put("NM_RUA", null);
            parametros.put("NM_BAIRRO", null);
            parametros.put("STATUS_OS", null);
            parametros.put("SERVICO_A_EXECUTAR", null);

            jTable = new JCTable(new OrdemDeServicoDB().getOrdemDeServicos(parametros, restricoes, null), new NomesColunasContantes().getNomesColunas());
        } else {
            jTable = new JCTable();
        }
        for (KeyListener keyListener : keyListeners) {
            jTable.addKeyListener(keyListener);
        }
        for (MouseListener mouseListener : mouseListeners) {
            jTable.addMouseListener(mouseListener);
        }
        jScrollPane1.setViewportView(jTable);
        jTable.validate();
    }

    public JCTable getTable() {
        return (JCTable) jTable;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    // End of variables declaration//GEN-END:variables

    public void cobrarOrdens() {
        HashMap parametros = new HashMap();
        parametros.put("ID", null);
        parametros.put("NR_ORDEM", null);
        parametros.put("NM_CLIENTE", null);
        parametros.put("STATUS_OS", null);
        for (HashMap hm : getTable().getValoresLinhasSelecionadas(parametros)) {
            if (Utilidades.validaString(hm.get("STATUS_OS")).equalsIgnoreCase("EXECUTADA")) {
                CobrarOrdemDLG cobrarOrdemDLG = new CobrarOrdemDLG(MainFrameSLM.getInstance(), true, hm);
            } else {
                JOptionPane.showMessageDialog(this, "A OS Nº " + Utilidades.validaString(hm.get("NR_ORDEM")) + " não está finalizada.");
            }
        }
        atualizarConsulta(((FiltroGestaoOrdemServico) gestaoOS.getPanelNorth()).montarRestricoes());
    }

    @Override
    public void addKeyListener(KeyListener listener) {
        jTable.addKeyListener(listener);
        jScrollPane1.addKeyListener(listener);
    }
}
